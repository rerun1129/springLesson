<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springlesson.users.repository.UserRepository">

    <select id="findAllByManage" resultType="com.example.springlesson.users.domain.dto.UsersManageResponseDto">
        select
            id, username, email, role,
            case when provider is null then '사이트 가입' else provider end as join_path,
            case when suspended_yn = 'N' then '활성화' else '비활성화' end as suspended_yn
        from users
        where role != 'ADMIN'
    </select>

    <select id="findByEmail" resultType="com.example.springlesson.users.domain.vo.Users">
        select
            id, username, email, picture, role, provider, providerId, suspended_yn
        from users
        where email = #{email}
    </select>

    <select id="findByUsername" resultType="com.example.springlesson.users.domain.vo.Users">
        select
            id, username, password, email, picture, role, provider, providerId, suspended_yn
        from users
        where username = #{username}
    </select>

    <select id="findById" resultType="com.example.springlesson.users.domain.dto.UsersManageResponseDto">
        select
            id, username, email, role,
            case when provider is null then '사이트 가입' else provider end as join_path,
            case when suspended_yn = 'N' then '활성화' else '비활성화' end as suspended_yn
        from users
        where id = #{id}
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into users (id, username, email, picture, role, password, createDate, provider, providerId)
        values (#{id}, #{username}, #{email}, #{picture}, 'USER', #{password}, current_timestamp, #{provider}, #{providerId})
    </insert>

    <update id="updateAuth" parameterType="com.example.springlesson.users.domain.dto.UserUpdateRequestDto">
        update users
        set suspended_yn = #{suspendedYn},
            role = #{role}
        where id = #{id}
    </update>

    <delete id="delete">
        delete from users
        where id = #{id}
    </delete>

</mapper>